{"version":3,"sources":["script.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_defineProperty","obj","value","Advice","diceButton","displayMessage","displayNumber","_this","this","slip_id","Math","ceil","random","fetch","concat","then","response","ok","Error","status","json","data","displayAdvice","err","console","error","_ref","slip","id","advice","innerText","addEventListener","randomAdvice","document","querySelector","adviceOnLoad"],"mappings":"AAAA,aAEA,SAASA,kBAAkBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAE7S,SAASO,aAAaC,EAAaC,EAAYC,GAAyN,OAAtMD,GAAYd,kBAAkBa,EAAYG,UAAWF,GAAiBC,GAAaf,kBAAkBa,EAAaE,GAAcN,OAAOC,eAAeG,EAAa,YAAa,CAAEL,UAAU,IAAiBK,EAE/Q,SAASI,gBAAgBC,EAAUL,GAAe,KAAMK,aAAoBL,GAAgB,MAAM,IAAIM,UAAU,qCAEhH,SAASC,gBAAgBC,EAAKV,EAAKW,GAAiK,OAApJX,KAAOU,EAAOZ,OAAOC,eAAeW,EAAKV,EAAK,CAAEW,MAAOA,EAAOhB,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBa,EAAIV,GAAOW,EAAgBD,EAU3M,IAVME,OAUoBX,cATxB,SAAAW,EAAYC,EAAYC,EAAgBC,GAAc,IAAAC,EAAAC,KAAAX,gBAAAW,KAAAL,GAAAH,gBAAAQ,KAAA,gBAQvC,WACb,IAAIC,EAAUC,KAAKC,KAAqB,IAAhBD,KAAKE,UAC7BC,MAAK,qCAAAC,OAAsCL,IAC3CM,MAAK,SAACC,GACJ,IAAIA,EAASC,GACX,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,UAElBL,MAAK,SAACM,GACJd,EAAKe,cAAcD,MARrB,OAUM,SAACE,GACLC,QAAQC,MAAMF,SArBoCvB,gBAAAQ,KAAA,iBAyBtC,SAAAkB,GAAY,IAAVC,EAAUD,EAAVC,KACTC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,OACXtB,EAAKF,eAAeyB,UAAYD,EAChCtB,EAAKD,cAAcwB,UAAYF,KA3B/BpB,KAAKJ,WAAaA,EAClBI,KAAKH,eAAiBA,EACtBG,KAAKF,cAAgBA,EAErBF,EAAW2B,iBAAiB,QAASvB,KAAKwB,iBA2BxC5B,WAAa6B,SAASC,cAAc,aACpC7B,eAAiB4B,SAASC,cAAc,eACxC5B,cAAgB2B,SAASC,cAAc,kBACvCC,aAAe,IAAIhC,OAAOC,WAAYC,eAAgBC,eAE5D6B,aAAaH","file":"script.js","sourcesContent":["/*\r\n  Random Advice Generator\r\n  By default, on first load the app will request for a\r\n  random advice and display it to the card. Then, the Class\r\n  Advice will have the dice button listen to a 'click' event\r\n  to request for another random advice and replace the first\r\n  one in the card.\r\n*/\r\nclass Advice{\r\n  constructor(diceButton, displayMessage, displayNumber){\r\n    this.diceButton = diceButton;\r\n    this.displayMessage = displayMessage;\r\n    this.displayNumber = displayNumber;\r\n\r\n    diceButton.addEventListener('click', this.randomAdvice);\r\n  }\r\n\r\n  randomAdvice = () => {\r\n    let slip_id = Math.ceil(Math.random() * 224);\r\n    fetch(`https://api.adviceslip.com/advice/${slip_id}`).\r\n    then((response) => {\r\n      if(!response.ok){\r\n        throw new Error(response.status);\r\n      }\r\n      return response.json();\r\n    }).\r\n    then((data) => {\r\n      this.displayAdvice(data);\r\n    }).\r\n    catch((err) => {\r\n      console.error(err);\r\n    });\r\n  }\r\n\r\n  displayAdvice = ({slip}) => {\r\n    const {id, advice} = slip;\r\n    this.displayMessage.innerText = advice;\r\n    this.displayNumber.innerText = id;\r\n  }\r\n}\r\n\r\nconst diceButton = document.querySelector('.dice-btn');\r\nconst displayMessage = document.querySelector('.advice-msg');\r\nconst displayNumber = document.querySelector('h1 .advice-num');\r\nconst adviceOnLoad = new Advice(diceButton, displayMessage, displayNumber);\r\n\r\nadviceOnLoad.randomAdvice();"]}